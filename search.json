[{"path":"https://riksrevisjonen.github.io/frostr2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 frostr2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aleksander Eilertsen. Author, maintainer. Office Auditor General Norway. Copyright holder.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eilertsen (2022). frostr2: Client MET FROST API. R package version 0.0.0.9000, https://riksrevisjonen.github.io/frostr2/.","code":"@Manual{,   title = {frostr2: Client for the MET FROST API},   author = {Aleksander Eilertsen},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://riksrevisjonen.github.io/frostr2/}, }"},{"path":"https://riksrevisjonen.github.io/frostr2/index.html","id":"frostr2","dir":"","previous_headings":"","what":"Client for the MET FROST API ","title":"Client for the MET FROST API ","text":"frostr2 unofficial R client MET Norway’s Frost API.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Client for the MET FROST API ","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"Riksrevisjonen/frostr2\")"},{"path":[]},{"path":"https://riksrevisjonen.github.io/frostr2/index.html","id":"initial-setup","dir":"","previous_headings":"Usage","what":"Initial setup","title":"Client for the MET FROST API ","text":"order use Frost API need register account MET Norway. grant client id secret store safe place. work frostr2 recommended store credentials set environmental variables (MET_FROST_ID MET_FROST_SECRET) available R. either use helper function set_frost_client(). Must users typically benefit setting environmental variables user level.","code":"frostr2::set_frost_client(scope = \"user\")"},{"path":"https://riksrevisjonen.github.io/frostr2/index.html","id":"basic-example","dir":"","previous_headings":"Usage","what":"Basic example","title":"Client for the MET FROST API ","text":"","code":"library(frostr2)  # Fetch observation data df <- get_observations(   sources = c(\"SN18700\", \"SN90450\"),   reference_time = \"2010-04-01/2010-04-03\",   elements = c(     \"mean(air_temperature P1D)\",     \"sum(precipitation_amount P1D)\",     \"mean(wind_speed P1D)\"   ) ) head(df) #> # A tibble: 6 x 12 #>   data.sourceId data.referenceTime       data.observations.ele~ data.observatio~ #>   <chr>         <chr>                    <chr>                             <dbl> #> 1 SN18700:0     2010-04-01T00:00:00.000Z mean(air_temperature ~              3.2 #> 2 SN18700:0     2010-04-01T00:00:00.000Z mean(air_temperature ~              3   #> 3 SN18700:0     2010-04-01T00:00:00.000Z sum(precipitation_amo~             13.5 #> 4 SN18700:0     2010-04-01T00:00:00.000Z sum(precipitation_amo~             29   #> 5 SN18700:0     2010-04-01T00:00:00.000Z mean(wind_speed P1D)                1.7 #> 6 SN18700:0     2010-04-02T00:00:00.000Z mean(air_temperature ~              3   #> # ... with 8 more variables: data.observations.unit <chr>, #> #   data.observations.level <df[,3]>, data.observations.timeOffset <chr>, #> #   data.observations.timeResolution <chr>, #> #   data.observations.timeSeriesId <int>, #> #   data.observations.performanceCategory <chr>, #> #   data.observations.exposureCategory <chr>, #> #   data.observations.qualityCode <int>"},{"path":"https://riksrevisjonen.github.io/frostr2/index.html","id":"for-developers","dir":"","previous_headings":"","what":"For developers","title":"Client for the MET FROST API ","text":"development purposes recommended turn session based caching. can done setting FROSTR2_DISABLE_CACHING environmental variable \"TRUE\".","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Client for the MET FROST API ","text":"frostr2 inspired frostr developed Iman Ghayoornia.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authentication method — auth","title":"Authentication method — auth","text":"Select authentication method.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authentication method — auth","text":"","code":"auth(req, client, auth_type = c(\"basic\", \"oauth\"))"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authentication method — auth","text":"req httr2 request client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Create query — create_query","title":"Create query — create_query","text":"Create query","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create query — create_query","text":"","code":"create_query(   endpoint,   client,   format,   version,   auth_type,   calculation_method = NULL,   categories = NULL,   cf_standard_names = NULL,   cf_cell_methods = NULL,   cf_units = NULL,   cf_versions = NULL,   code_tables = NULL,   country = NULL,   county = NULL,   descriptions = NULL,   durations = NULL,   elements = NULL,   exposure_categories = NULL,   external_ids = NULL,   fields = NULL,   frequencies = NULL,   geometry = NULL,   ids = NULL,   icao_code = NULL,   include_extra = NULL,   lang = NULL,   levels = NULL,   level_units = NULL,   level_types = NULL,   limit = NULL,   location = NULL,   max_age = NULL,   municipality = NULL,   name = NULL,   names = NULL,   nearest_max_count = NULL,   period = NULL,   performance_categories = NULL,   qualities = NULL,   reference_time = NULL,   sensor_levels = NULL,   ship_code = NULL,   sources = NULL,   station_holder = NULL,   statuses = NULL,   time_offsets = NULL,   time_resolutions = NULL,   time_series_ids = NULL,   types = NULL,   unit = NULL,   units = NULL,   valid_time = NULL,   wigos_id = NULL,   wmo_id = NULL )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create query — create_query","text":"endpoint Endpoint client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. format character: Response format. version character: API version. auth_type character: Authentication method, either 'basic' 'oauth'. calculation_method character: Calculation method categories character: Categories cf_standard_names character: CF standard names cf_cell_methods character: CF cell methods cf_units character: CF units cf_versions character: CF versions code_tables character: Code tables country character: Country. specified, sources whose 'country' 'countryCode' attribute matches search filter may included result. county character: County. specified, sources whose 'county' 'countyId' attribute matches search filter may included result. descriptions character: Descriptions durations character: IDF duration(s), minutes. elements character: Elements. See `get_elements()` available values. exposure_categories integer: exposure categories get observations , e.g. 1, 2 etc. external_ids character: External id. specified, sources whose 'externalIds' attribute contains least one value matches specified, comma-separated list search filters may included result. fields character: Fields return response. frequencies character: IDF frequencies, years. geometry character: Sources defined specified geometry. Geometries specified either nearest(POINT(...)) POLYGON(...) using well-known text representation geometry (WKT). ids character: Source ID(s). icao_code character: ICAO code. include_extra integer: 1 extra data returned. lang character: ISO language/locale used search filters return values levels numeric: sensor levels get observations , e.g. 0.1, 2, 10, 20. level_units character: Sensor level units level_types character: Sensor level types limit integer: maximum number observation times returned source/element combination location character: Geographic position get IDF data, following format \"POINT(<longitude degrees> <latitude degrees>)\". max_age character: maximum observation age ISO-8601 period. municipality character: Municipality. specified, sources whose 'municipality' 'municipalityId' attribute matches search filter may included result. name character: specified, sources whose 'name' attribute matches search filter included result. names character: Location name(s) nearest_max_count character: string maximum number sources returned using \"nearest(POINT(...))\" `geometry`. Defaults 1. period character: validity period, e.g. '1931/1960'. performance_categories character: performance categories get observations, e.g \"\", \"B\" etc. qualities integer: qualities get observations , e.g. 1, 2 etc. reference_time character: Time range get observations , ISO-8601 format. sensor_levels character: Sensor levels ship_code character: Ship code. specified, sources whose 'shipCodes' attribute contains least one name matches search filter may included result. sources character: Source (station) ID, e.g. 'SN18700'. station_holder character: Station holder. specified, sources whose 'stationHolders' attribute contains least one name matches search filter may included result. statuses character: Statuses time_offsets character: time offsets get observations , specified ISO-8601 periods. time_resolutions character: time resolutions get observations , specified ISO-8601 periods. time_series_ids integer: internal time series IDs get observations . Defaults 0. types character: Source type. Either \"SensorSystem\", \"InterpolatedDataset\", \"RegionDataset\". unit character: Unit measure intensity, either 'mm' 'lsha'. units character: Units valid_time character: specified, sources , still , valid/applicable part interval may included result.pecify <date>/<date>, <date>/now, <date>, now, <date> form YYYY-MM-DD, e.g. 2017-03-06. default 'now', .e. currently valid/applicable sources included. wigos_id character: WIGOS ID. specified, sources whose 'wigosId' attribute matches search filter may included result. wmo_id character: WMO ID. specified, sources whose 'wmoId' attribute matches search filter  may included result.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create query — create_query","text":"httr2_request","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Create token — create_token","title":"Create token — create_token","text":"Create FROST API token.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create token — create_token","text":"","code":"create_token(client, return_response = FALSE)"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create token — create_token","text":"client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create token — create_token","text":"list","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/create_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create token — create_token","text":"","code":"if (FALSE) { # Generate token create_token() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_available_climate_normals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available climate normals — get_available_climate_normals","title":"Get available climate normals — get_available_climate_normals","text":"Get available combinations sources, elements, periods climate normals.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_available_climate_normals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available climate normals — get_available_climate_normals","text":"","code":"get_available_climate_normals(   sources = NULL,   elements = NULL,   period = NULL,   fields = NULL,   format = \"jsonld\",   version = \"v0\",   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_available_climate_normals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available climate normals — get_available_climate_normals","text":"sources character: Source (station) ID, e.g. 'SN18700'. elements character: Elements. See `get_elements()` available values. period character: validity period, e.g. '1931/1960'. fields character: Fields return response. format character: Response format. version character: API version. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_available_climate_normals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available climate normals — get_available_climate_normals","text":"","code":"if (FALSE) { df <- get_available_climate_normals() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_climate_normals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get climate normals — get_climate_normals","title":"Get climate normals — get_climate_normals","text":"Get climate normals.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_climate_normals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get climate normals — get_climate_normals","text":"","code":"get_climate_normals(   sources,   elements = NULL,   period = NULL,   format = \"jsonld\",   version = \"v0\",   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_climate_normals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get climate normals — get_climate_normals","text":"sources character: Source (station) ID, e.g. 'SN18700'. elements character: Elements. See `get_elements()` available values. period character: validity period, e.g. '1931/1960'. format character: Response format. version character: API version. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_climate_normals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get climate normals — get_climate_normals","text":"","code":"df <- get_climate_normals(\"SN100\") #> Error in get_frost_client(): No client id found, please supply with `client` argument or with MET_FROST_ID env var"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_code_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get code tables — get_code_tables","title":"Get code tables — get_code_tables","text":"Get metadata code tables.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_code_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get code tables — get_code_tables","text":"","code":"get_code_tables(   ids = NULL,   fields = NULL,   lang = c(\"en-US\", \"nb-NO\", \"nn-NO\"),   version = \"v0\",   format = \"jsonld\",   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_code_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get code tables — get_code_tables","text":"ids character: Source ID(s). fields character: Fields return response. lang character: ISO language/locale used search filters return values version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_code_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get code tables — get_code_tables","text":"Use default query parameters retrieve code tables.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_code_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get code tables — get_code_tables","text":"","code":"if (FALSE) { # Get all code tables df <- get_code_tables() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get elements — get_elements","title":"Get elements — get_elements","text":"Get metadata weather climate elements.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get elements — get_elements","text":"","code":"get_elements(   ids = NULL,   names = NULL,   descriptions = NULL,   units = NULL,   code_tables = NULL,   statuses = NULL,   calculation_method = NULL,   categories = NULL,   time_offsets = NULL,   sensor_levels = NULL,   cf_standard_names = NULL,   cf_cell_methods = NULL,   cf_units = NULL,   cf_versions = NULL,   fields = NULL,   lang = c(\"en-US\", \"nb-NO\", \"nn-NO\"),   version = \"v0\",   format = c(\"jsonld\"),   client = get_frost_client(),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get elements — get_elements","text":"ids character: Source ID(s). names character: Location name(s) descriptions character: Descriptions units character: Units code_tables character: Code tables statuses character: Statuses calculation_method character: Calculation method categories character: Categories time_offsets character: time offsets get observations , specified ISO-8601 periods. sensor_levels character: Sensor levels cf_standard_names character: CF standard names cf_cell_methods character: CF cell methods cf_units character: CF units cf_versions character: CF versions fields character: Fields return response. lang character: ISO language/locale used search filters return values version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get elements — get_elements","text":"tibble list","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get elements — get_elements","text":"Use default query parameters retrieve elements.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get elements — get_elements","text":"","code":"if (FALSE) { # Get all elements df <- get_elements() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_frost_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Frost API Client — get_frost_client","title":"Get Frost API Client — get_frost_client","text":"Get Frost API client info R environment variables.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_frost_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Frost API Client — get_frost_client","text":"","code":"get_frost_client()"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_frost_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Frost API Client — get_frost_client","text":"","code":"if (FALSE) { get_frost_client() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get locations — get_locations","title":"Get locations — get_locations","text":"Get metadata location names.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get locations — get_locations","text":"","code":"get_locations(   names = NULL,   geometry = NULL,   fields = NULL,   version = \"v0\",   format = \"jsonld\",   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get locations — get_locations","text":"names character: Location name(s) geometry character: Sources defined specified geometry. Geometries specified either nearest(POINT(...)) POLYGON(...) using well-known text representation geometry (WKT). fields character: Fields return response. version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_locations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get locations — get_locations","text":"Use default query parameters retrieve location names.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_locations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get locations — get_locations","text":"","code":"if (FALSE) { df <- get_locations() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get observations — get_observations","title":"Get observations — get_observations","text":"Get weather observations.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get observations — get_observations","text":"","code":"get_observations(   sources,   reference_time,   elements,   max_age = NULL,   limit = NULL,   time_offsets = NULL,   time_resolutions = NULL,   time_series_ids = NULL,   performance_categories = NULL,   exposure_categories = NULL,   qualities = NULL,   levels = NULL,   include_extra = NULL,   fields = NULL,   version = \"v0\",   format = c(\"jsonld\", \"csv\"),   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get observations — get_observations","text":"sources character: Source (station) ID, e.g. 'SN18700'. reference_time character: Time range get observations , ISO-8601 format. elements character: Elements. See `get_elements()` available values. max_age character: maximum observation age ISO-8601 period. limit integer: maximum number observation times returned source/element combination time_offsets character: time offsets get observations , specified ISO-8601 periods. time_resolutions character: time resolutions get observations , specified ISO-8601 periods. time_series_ids integer: internal time series IDs get observations . Defaults 0. performance_categories character: performance categories get observations, e.g \"\", \"B\" etc. exposure_categories integer: exposure categories get observations , e.g. 1, 2 etc. qualities integer: qualities get observations , e.g. 1, 2 etc. levels numeric: sensor levels get observations , e.g. 0.1, 2, 10, 20. include_extra integer: 1 extra data returned. fields character: Fields return response. version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get observations — get_observations","text":"tibble list","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get observations — get_observations","text":"possible input parameters see `get_sources()`, `get_elements()`, `get_observations_timeseries()`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get observations — get_observations","text":"","code":"if (FALSE) { # Example query df <- get_observations(   sources = c(\"SN18700\", \"SN90450\"),   reference_time = \"2010-04-01/2010-04-03\",   elements = c(     \"mean(air_temperature P1D)\",     \"sum(precipitation_amount P1D)\",     \"mean(wind_speed P1D)\"   ) ) }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get observations time series — get_observations_ts","title":"Get observations time series — get_observations_ts","text":"Get available time series observations.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get observations time series — get_observations_ts","text":"","code":"get_observations_ts(   sources = NULL,   reference_time = NULL,   elements = NULL,   time_offsets = NULL,   time_resolutions = NULL,   time_series_ids = NULL,   performance_categories = NULL,   exposure_categories = NULL,   qualities = NULL,   levels = NULL,   level_types = NULL,   level_units = NULL,   include_extra = NULL,   fields = NULL,   version = \"v0\",   format = \"jsonld\",   client = get_frost_client(),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get observations time series — get_observations_ts","text":"sources character: Source (station) ID, e.g. 'SN18700'. reference_time character: Time range get observations , ISO-8601 format. elements character: Elements. See `get_elements()` available values. time_offsets character: time offsets get observations , specified ISO-8601 periods. time_resolutions character: time resolutions get observations , specified ISO-8601 periods. time_series_ids integer: internal time series IDs get observations . Defaults 0. performance_categories character: performance categories get observations, e.g \"\", \"B\" etc. exposure_categories integer: exposure categories get observations , e.g. 1, 2 etc. qualities integer: qualities get observations , e.g. 1, 2 etc. levels numeric: sensor levels get observations , e.g. 0.1, 2, 10, 20. level_types character: Sensor level types level_units character: Sensor level units include_extra integer: 1 extra data returned. fields character: Fields return response. version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get observations time series — get_observations_ts","text":"Use default query parameters retrieve time series.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_observations_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get observations time series — get_observations_ts","text":"","code":"if (FALSE) { df <- get_observations_ts(\"SN23670\") }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_rainfall.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rainfall — get_rainfall","title":"Get rainfall — get_rainfall","text":"Get rainfall IDF data.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_rainfall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rainfall — get_rainfall","text":"","code":"get_rainfall(   sources = NULL,   location = NULL,   durations = NULL,   frequencies = NULL,   unit = c(\"lsha\", \"mm\"),   fields = NULL,   version = \"v0\",   format = c(\"jsonld\", \"csv\"),   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_rainfall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rainfall — get_rainfall","text":"sources character: Source (station) ID, e.g. 'SN18700'. location character: Geographic position get IDF data, following format \"POINT(<longitude degrees> <latitude degrees>)\". durations character: IDF duration(s), minutes. frequencies character: IDF frequencies, years. unit character: Unit measure intensity, either 'mm' 'lsha'. fields character: Fields return response. version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_rainfall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rainfall — get_rainfall","text":"tibble list","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_rainfall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rainfall — get_rainfall","text":"","code":"if (FALSE) { df <- get_rainfall() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sources — get_sources","title":"Get sources — get_sources","text":"Get metadata source entities.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sources — get_sources","text":"","code":"get_sources(   ids = NULL,   types = NULL,   elements = NULL,   geometry = NULL,   nearest_max_count = NULL,   valid_time = NULL,   name = NULL,   country = NULL,   county = NULL,   municipality = NULL,   wmo_id = NULL,   station_holder = NULL,   external_ids = NULL,   icao_code = NULL,   ship_code = NULL,   wigos_id = NULL,   fields = NULL,   version = \"v0\",   format = c(\"jsonld\", \"csv\"),   client = get_frost_client(),   auth_type = c(\"basic\", \"oauth\"),   flatten = TRUE,   return_response = FALSE )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sources — get_sources","text":"ids character: Source ID(s). types character: Source type. Either \"SensorSystem\", \"InterpolatedDataset\", \"RegionDataset\". elements character: Elements. See `get_elements()` available values. geometry character: Sources defined specified geometry. Geometries specified either nearest(POINT(...)) POLYGON(...) using well-known text representation geometry (WKT). nearest_max_count character: string maximum number sources returned using \"nearest(POINT(...))\" `geometry`. Defaults 1. valid_time character: specified, sources , still , valid/applicable part interval may included result.pecify <date>/<date>, <date>/now, <date>, now, <date> form YYYY-MM-DD, e.g. 2017-03-06. default 'now', .e. currently valid/applicable sources included. name character: specified, sources whose 'name' attribute matches search filter included result. country character: Country. specified, sources whose 'country' 'countryCode' attribute matches search filter may included result. county character: County. specified, sources whose 'county' 'countyId' attribute matches search filter may included result. municipality character: Municipality. specified, sources whose 'municipality' 'municipalityId' attribute matches search filter may included result. wmo_id character: WMO ID. specified, sources whose 'wmoId' attribute matches search filter  may included result. station_holder character: Station holder. specified, sources whose 'stationHolders' attribute contains least one name matches search filter may included result. external_ids character: External id. specified, sources whose 'externalIds' attribute contains least one value matches specified, comma-separated list search filters may included result. icao_code character: ICAO code. ship_code character: Ship code. specified, sources whose 'shipCodes' attribute contains least one name matches search filter may included result. wigos_id character: WIGOS ID. specified, sources whose 'wigosId' attribute matches search filter may included result. fields character: Fields return response. version character: API version. format character: Response format. client list: List client id secret. Defaults `MET_FROST_ID` `MET_FROST_SECRET` environment variables. auth_type character: Authentication method, either 'basic' 'oauth'. flatten logical: TRUE response transformed table. return_response logical: TRUE list class `frost_api` returned, including raw `httr2_response`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sources — get_sources","text":"tibble list","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_sources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get sources — get_sources","text":"Use default query parameters retrieve sources.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/get_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sources — get_sources","text":"","code":"if (FALSE) { # Get all sources df <- get_sources() }"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/set_frost_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Frost API Client — set_frost_client","title":"Set Frost API Client — set_frost_client","text":"Helper function set correct environmental variables work `frostr2`.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/set_frost_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Frost API Client — set_frost_client","text":"","code":"set_frost_client(   id = NULL,   secret = NULL,   scope = c(\"session\", \"project\", \"user\") )"},{"path":"https://riksrevisjonen.github.io/frostr2/reference/set_frost_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Frost API Client — set_frost_client","text":"id character: Client id secret character: Client secret scope character: Scope environmental variables. See details.","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/set_frost_client.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Frost API Client — set_frost_client","text":"order generate credentials need register user [FROST API service](https://frost.met./index.html). can use credentials store set environmental variables (MET_FROST_ID MET_FROST_SECRET) automatically picked `frostr2`. environmental variables can set either session, project user level. Must users typically benefit setting environmental variables user level. Please note specifying `scope` \"project\" \"user\" modify relevant .Renviron file, mindful .","code":""},{"path":"https://riksrevisjonen.github.io/frostr2/reference/set_frost_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Frost API Client — set_frost_client","text":"","code":"if (FALSE) { # Set client for this user session set_frost_client()  # Edit .Renviron for current working directory set_frost_client(scope = \"project\")  # Edit user .Renviron set_frost_client(scope = \"user\") }"}]
